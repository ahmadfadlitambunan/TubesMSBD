
// Query Transaction untuk Transaksi Membership
DELIMITER &&
CREATE OR REPLACE PROCEDURE verify_order(IN ord INT(20), IN adm INT(20), IN st CHAR(1))
BEGIN
    DECLARE user INT; 
    DECLARE duration INT;
    DECLARE invoice_id INT;
    SELECT o.user_id INTO user FROM orders o WHERE o.id = ord;
    SELECT plans.duration_month INTO duration FROM orders JOIN plans ON orders.id = plans.id WHERE orders.id = ord;
    START TRANSACTION;
		UPDATE orders SET status = st, verified_by = adm, verified_at = NOW() WHERE id = ord;
        INSERT INTO invoices (order_id, created_at, updated_at) VALUES (ord, NOW(), NOW());
        SELECT LAST_INSERT_ID() INTO invoice_id;
        INSERT INTO memberships (invoice_id, user_id, start_at, expired_at, created_at, updated_at)
        			VALUES (invoice_id,
                      user,
                      NOW(),
                      DATE_ADD(NOW(), INTERVAL duration MONTH), 
                      NOW(),
                      NOW());
        COMMIT;
END&&

// Query trigger untuk cek gerakan latihan yang duplikat dalam 1 program latihan;
DELIMITER &&
CREATE TRIGGER check_duplikat_exercise
BEFORE INSERT ON `workout_exercises`
FOR EACH ROW
BEGIN
    IF((SELECT COUNT(`exercise_id`) FROM `workout_exercises` WHERE `workout_id` = NEW.workout_id AND `exercise_id` = NEW.exercise_id) > 0)
        THEN SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Program latihan tidak boleh memiliki gerakan yang sama lebih dari satu!';
    END IF;
END &&

// fungsi menghitung jumlah gerakan dalam program
DELIMITER &&
CREATE OR REPLACE FUNCTION count_jlh_latihan(id_workout int(20)) RETURNS INT(10)
BEGIN
RETURN (SELECT COUNT('workout_exercises.exercise_id') FROM workouts w
JOIN workout_exercises we ON id_workout = we.workout_id
GROUP BY we.workout_id);
END &&


